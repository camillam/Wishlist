{"version":3,"sources":["Wish.js","WishContext.js","WishList.js","Nav.js","AddWish.js","App.js","serviceWorker.js","index.js"],"names":["Wish","description","price","className","WishContext","createContext","WishProvider","props","useState","wishes","setWishes","Provider","value","children","WishList","useContext","class","map","wish","Nav","length","AddWish","setDescription","setPrice","e","preventDefault","previousWishes","onSubmit","type","name","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAWeA,EATF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,MACxB,OACI,4BACI,wBAAIC,UAAU,WAAWF,GACzB,wBAAIE,UAAU,WAAWD,KCJxBE,EAAcC,0BAEdC,EAAe,SAAAC,GAAU,IAAD,EACLC,mBAAS,CACjC,CACIP,YAAa,eACbC,MAAO,WAEX,CACID,YAAa,gBACbC,MAAO,UARkB,mBAC1BO,EAD0B,KAClBC,EADkB,KAYjC,OACI,kBAACN,EAAYO,SAAb,CAAsBC,MAAO,CAACH,EAAQC,IACjCH,EAAMM,SADX,MCeQC,EA5BE,WAAO,IAAD,EACQC,qBAAWX,GADnB,mBACbK,EADa,UAGpB,OACI,6BACI,yBAAKO,MAAM,sBACX,yBAAKA,MAAM,iBACX,yBAAKA,MAAM,YACX,+BACI,+BACI,wBAAIb,UAAU,aACV,wBAAIa,MAAM,WAAV,eACA,wBAAIA,MAAM,WAAV,WAGR,+BACKP,EAAOQ,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CAAMjB,YAAaiB,EAAKjB,YAAaC,MAAOgB,EAAKhB,kBCP1DiB,EAXH,WAAO,IAAD,EACcJ,qBAAWX,GADzB,mBACPK,EADO,UAGd,OACI,6BACI,uDACA,+CAAkBA,EAAOW,U,OCqBtBC,EA3BC,WAAO,IAAD,EACoBb,mBAAS,IAD7B,mBACXP,EADW,KACEqB,EADF,OAEQd,mBAAS,IAFjB,mBAEXN,EAFW,KAEJqB,EAFI,OAGUR,qBAAWX,GAHrB,mBAGHM,GAHG,WAaZW,EAAU,SAAAG,GACZA,EAAEC,iBACFf,GAAU,SAAAgB,GAAc,4BAAQA,GAAR,CAAwB,CAACzB,YAAaA,EAAaC,MAAOA,SAGtF,OACI,0BAAMyB,SAAUN,GACZ,2BAAOO,KAAK,OAAOC,KAAK,cAAcjB,MAAOX,EAAa6B,SAfxC,SAACN,GACvBF,EAAeE,EAAEO,OAAOnB,UAepB,2BAAOgB,KAAK,OAAOC,KAAK,QAAQjB,MAAOV,EAAO4B,SAZnC,SAACN,GAChBD,EAASC,EAAEO,OAAOnB,UAYd,yCCNGoB,MAZf,WACE,OACE,kBAAC,EAAD,KACE,yBAAK7B,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fc9c21de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Wish = ({description, price}) => {\r\n    return (\r\n        <tr>\r\n            <td className=\"column1\">{description}</td>\r\n            <td className=\"column2\">{price}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Wish;","import React, {useState, createContext} from 'react';\r\n\r\nexport const WishContext = createContext();\r\n\r\nexport const WishProvider = props => {\r\n    const [wishes, setWishes] = useState([\r\n        {\r\n            description: 'Væglamper',\r\n            price: '300-400'\r\n        },\r\n        {\r\n            description: 'Roccamore sko',\r\n            price: '2000'\r\n        }\r\n    ]);\r\n\r\n    return(\r\n        <WishContext.Provider value={[wishes, setWishes]}>\r\n            {props.children};\r\n        </WishContext.Provider>\r\n    );\r\n}"," import React,{useState, useContext} from 'react';\r\n import Wish from './Wish';\r\n import {WishContext} from './WishContext';\r\n \r\n const WishList = () => {\r\n    const [wishes, setWishes] = useContext(WishContext);\r\n\r\n    return(\r\n        <div>\r\n            <div class=\"container-table100\">\r\n            <div class=\"wrap-table100\">\r\n            <div class=\"table100\">\r\n            <table>\r\n                <thead>\r\n                    <tr className=\"tableHead\">\r\n                        <th class=\"column1\">Description</th>\r\n                        <th class=\"column2\">Price</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {wishes.map(wish => (\r\n                        <Wish description={wish.description} price={wish.price} />\r\n                    ))} \r\n                </tbody>\r\n            </table> \r\n            </div>\r\n            </div>\r\n            </div>         \r\n        </div>       \r\n    );\r\n }\r\n\r\n export default WishList;","import React, {useContext} from 'react';\r\nimport {WishContext} from './WishContext';\r\n\r\nconst Nav = () => {\r\n    const [wishes, setWishes] = useContext(WishContext);\r\n\r\n    return (\r\n        <div>\r\n            <h3>Camillas ønskeseddel</h3>\r\n            <p>Antal ønsker: {wishes.length}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, {useState, useContext} from 'react';\r\nimport {WishContext} from './WishContext';\r\n \r\nconst AddWish = () => {\r\n    const [description, setDescription] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [wishes, setWishes] = useContext(WishContext);\r\n\r\n    const updateDescription = (e) => {\r\n        setDescription(e.target.value);\r\n    }\r\n\r\n    const updatePrice= (e) => {\r\n        setPrice(e.target.value);\r\n    }\r\n\r\n    const AddWish = e => {\r\n        e.preventDefault();\r\n        setWishes(previousWishes => [...previousWishes, {description: description, price: price}]) //get latest information about the state before adding\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={AddWish}>\r\n            <input type='text' name='beskrivelse' value={description} onChange={updateDescription}/>\r\n            <input type='test' name='price' value={price} onChange={updatePrice}/>\r\n            <button>Gem</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddWish;","import React from 'react';\r\nimport './App.css';\r\nimport WishList from './WishList';\r\nimport Nav from './Nav';\r\nimport {WishProvider} from './WishContext';\r\nimport AddWish from './AddWish';\r\n\r\nfunction App() {\r\n  return (\r\n    <WishProvider>                 \r\n      <div className=\"limiter\">\r\n          <Nav/>\r\n          <WishList/>\r\n          <AddWish/>\r\n      </div>\r\n    </WishProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}