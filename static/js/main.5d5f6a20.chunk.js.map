{"version":3,"sources":["Components/Wish.js","WishContext.js","Components/WishList.js","Nav.js","Components/AddWish.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["Wish","description","price","link","className","WishContext","createContext","WishProvider","props","useState","cWishes","setCWishes","eWishes","setEWishes","useEffect","accessToken","keys","dbx","Dropbox","fetch","filesDownload","path","then","responseTxt","fileBlob","text","response","obj","JSON","parse","catch","error","console","getWishlistFromApi","Provider","value","children","WishList","useContext","undefined","length","headline","user","map","wish","Nav","to","AddWish","setDescription","setPrice","setWishes","e","preventDefault","previousWishes","onSubmit","type","name","onChange","target","About","App","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5d5f6a20.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Wish = ({description, price, link}) => {\r\n    return (\r\n        <tr>\r\n            <td className=\"column1\">{description}</td>\r\n            <td className=\"column2\">{price}</td>\r\n            <td className=\"column3\">{link}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Wish;","import React, {useState, createContext, useEffect} from 'react';\r\nimport {Dropbox} from 'dropbox';\r\nimport keys from './data/keys.json';\r\n\r\nexport const WishContext = createContext();\r\n\r\nexport const WishProvider = props => {\r\n    const [cWishes, setCWishes] = useState({});\r\n    const [eWishes, setEWishes] = useState({});\r\n\r\n    const getWishlistFromApi = () => {\r\n        const accessToken = keys[\"accessToken\"];\r\n        const dbx = new Dropbox({  \r\n            accessToken,  \r\n            fetch  \r\n          });\r\n    \r\n        dbx.filesDownload({\r\n            path: '/CamillasWish.txt'\r\n        }).then(responseTxt => {\r\n            return responseTxt.fileBlob.text();\r\n        }).then(response => {\r\n            var obj = JSON.parse(response);\r\n            setCWishes(obj);\r\n        })\r\n        .catch(error => console.error(error));\r\n\r\n        dbx.filesDownload({  //todo: do this in a more clever way.  Maybe it is possible to fecth both files at the same time?\r\n            path: '/EllasWish.txt'\r\n        }).then(responseTxt => {\r\n            return responseTxt.fileBlob.text();\r\n        }).then(response => {\r\n            var obj = JSON.parse(response);\r\n            setEWishes(obj);\r\n        })\r\n        .catch(error => console.error(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWishlistFromApi();\r\n    }, []);\r\n\r\n    return(\r\n        <WishContext.Provider value={[cWishes, eWishes]}>\r\n            {props.children};\r\n        </WishContext.Provider>\r\n    );\r\n}"," import React,{useContext} from 'react';\r\n import Wish from './Wish';\r\n import {WishContext} from '../WishContext';\r\n \r\n const WishList = (props) => {\r\n    const [cWishes, eWishes] = useContext(WishContext); //todo: do not always use Camillas\r\n    const Ella = \"E\";\r\n    const Camilla = \"C\";\r\n\r\n    if (cWishes === undefined) { \r\n        return(<div>Loading....</div>);\r\n    } else if (!cWishes.length) {\r\n        return (<div>An error occured. No wishes found. </div>);\r\n    } else {\r\n        return(\r\n            <div> \r\n                <h1>{props.headline}</h1>  \r\n                <p>Antal ønsker: {cWishes.length}</p>      \r\n                <div className=\"wrap-table100\">\r\n                <div className=\"table100\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <td className=\"column1\">Beskrivelse</td>\r\n                            <td className=\"column2\">Pris</td>\r\n                            <td className=\"column3\">Link</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody> \r\n                        {(props.user === Camilla) ? //Todo: make a better solution where it is possible to have more than two users. \r\n                            cWishes.map(wish => (\r\n                                <Wish description={wish.description} price={wish.price} link={wish.link} />\r\n                            ))\r\n                        :\r\n                        eWishes.map(wish => (\r\n                                <Wish description={wish.description} price={wish.price} link={wish.link} />\r\n                            ))}                                    \r\n                    </tbody>\r\n                </table> \r\n                </div>\r\n                </div>        \r\n            </div>       \r\n        );\r\n    }\r\n }\r\n\r\n export default WishList;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst Nav = () => {\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"nav-list\">  \r\n                <li><Link to=\"/\">Home</Link></li>             \r\n                <li><Link to=\"/camillaswishlist\">Camillas ønsker</Link></li>\r\n                <li><Link to=\"/ellaswishlist\">Ellas ønsker</Link></li>\r\n                {/* <li><Link to=\"/addwish\">Add wish</Link></li> */}\r\n                <li><Link to=\"/about\">About</Link></li> \r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, {useState, useContext} from 'react';\r\nimport {WishContext} from '../WishContext';\r\n \r\nconst AddWish = () => {\r\n    const [description, setDescription] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [, setWishes] = useContext(WishContext);\r\n\r\n    const updateDescription = (e) => {\r\n        setDescription(e.target.value);\r\n    }\r\n\r\n    const updatePrice= (e) => {\r\n        setPrice(e.target.value);\r\n    }\r\n\r\n    const AddWish = e => {\r\n        e.preventDefault();\r\n        setWishes(previousWishes => [...previousWishes, {description: description, price: price}]) //get latest information about the state before adding\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={AddWish}>\r\n            <p>Note: This is not fully implemented yet. Do not use.</p>\r\n            <input type='text' name='beskrivelse' value={description} onChange={updateDescription}/>\r\n            <input type='test' name='price' value={price} onChange={updatePrice}/>\r\n            <button>Gem</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddWish;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h3>Camillas eksperiment</h3>\r\n            <p>Ikke klar til brug endnu</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport './App.css';\r\nimport WishList from './Components/WishList';\r\nimport Nav from './Nav';\r\nimport {WishProvider} from './WishContext';\r\nimport AddWish from './Components/AddWish';\r\nimport About from './Components/About';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <WishProvider>  \r\n      <Router>      \r\n        <Nav/>          \r\n        <div className=\"limiter\">\r\n          <Switch>\r\n            <Route path=\"/camillaswishlist\" render={(props) => <WishList {...props} headline={'Camillas ønskeseddel'} user={'C'}/>} />\r\n            <Route path=\"/ellaswishlist\" render={(props) => <WishList {...props} headline={'Ellas ønskeseddel (ikke klar endnu)'} user={'E'}/>} />\r\n            <Route path=\"/addwish\" component={AddWish} />\r\n            <Route path=\"/about\" component={About} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </WishProvider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}